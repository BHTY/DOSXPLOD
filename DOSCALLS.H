/**
 *      File: DOSCALLS.H
 *      Function prototypes and C call interface for DOS flat mode API
 *      Copyright (c) 2025 by Will Klees
 */

#ifndef __DOSCALLS_H_
#define __DOSCALLS_H_

#include "TYPES.H"

/* File open mode definitions */
#define FILE_READ   0
#define FILE_WRITE  1
#define FILE_RDWR   2

/* Seek modes */
#define SEEK_SET    0
#define SEEK_CUR    1
#define SEEK_END    2

/* Standard IOCTLs */

/* Type definitions */
typedef WORD HFILE;
typedef WORD DOSSTATUS;

/* Error codes */
enum DOSERR {
    DOS_SUCCESS = 0x00,
    DOS_INVALID_FUNCTION,
    DOS_FILE_NOT_FOUND,
    DOS_PATH_NOT_FOUND,
    DOS_TOO_MANY_OPEN_FILES,
    DOS_ACCESS_DENIED,
    DOS_INVALID_HANDLE,
    DOS_MCB_DESTROYED,
    DOS_INSUFFICIENT_MEMORY,
    DOS_INVALID_MEMORY_BLOCK,
    DOS_INVALID_ENVIRONMENT,
    DOS_INVALID_FORMAT,
    DOS_INVALID_ACCESS_MODE,
    DOS_INVALID_DATA,
    DOS_RESERVED_0E,
    DOS_INVALID_DRIVE,
    DOS_REMOVE_CUR_DIR,
    DOS_NOT_SAME_DEVICE,
    DOS_NO_MORE_FILES,
    DOS_WRITE_PROTECT,
    DOS_UNKNOWN_UNIT,
    DOS_DRIVE_NOT_READY,
    DOS_UNKNOWN_COMMAND,
    DOS_CRC_ERROR,
    DOS_BAD_REQ_STRUCT_LEN,
    DOS_SEEK_ERROR,
    DOS_UNKNOWN_MEDIA_TYPE,
    DOS_SECTOR_NOT_FOUND,
    DOS_PRINTER_OUT_OF_PAPER,
    DOS_WRITE_FAULT,
    DOS_READ_FAULT,
    DOS_GENERAL_FAILURE,
    DOS_SHARING_VIOLATION,
    DOS_LOCK_VIOLATION,
    DOS_INVALID_DISK_CHANGE,
    DOS_FCB_UNAVAILABLE,
    DOS_SHARING_BUFFER_OVERFLOW,
    DOS_RESERVED_25,
    DOS_UNABLE_TO_COMPLETE_FILE_OP,
    DOS_RESERVED_27,
    DOS_RESERVED_28,
    DOS_RESERVED_29,
    DOS_RESERVED_2A,
    DOS_RESERVED_2B,
    DOS_RESERVED_2C,
    DOS_RESERVED_2D,
    DOS_RESERVED_2E,
    DOS_RESERVED_2F,
    DOS_RESERVED_30,
    DOS_RESERVED_31,
    DOS_NETWORK_REQ_UNSUPPORTED,
    DOS_REMOTE_COMPUTER_NOT_LISTENING,
    DOS_DUPLICATE_NAME_ON_NW,
    DOS_NETWORK_NAME_NOT_FOUND,
    DOS_NETWORK_BUSY,
    DOS_NETWORK_DEVICE_NO_LONGER_EXISTS,
    DOS_NETBIOS_COMMAND_LIMIT_EXCEEDED,
    DOS_NETWORK_ADAPTER_ERROR,
    DOS_INCORRECT_NETWORK_RESPONSE,
    DOS_UNEXPECTED_NETWORK_ERROR,
    DOS_INCOMPATIBLE_REMOTE_ADAPTER,
    DOS_PRINT_QUEUE_FULL,
    DOS_NO_SPACE_FOR_PRINT_FILE,
    DOS_PRINT_FILE_DELETED,
    DOS_NETWORK_NAME_DELETED,
    DOS_ACCESS_DENIED_2,
    DOS_DOS_NETWORK_DEVICE_TYPE_INCORRECT,
    DOS_NETWORK_NAME_NOT_FOUND_2,
    DOS_NETWORK_NAME_LIMIT_EXCEEDED,
    DOS_NETBIOS_SESSION_LIMIT_EXCEEDED,
    DOS_TEMPORARILY_PAUSED,
    DOS_NETWORK_REQUEST_NOT_ACCEPTED,
    DOS_REDIRECTION_PAUSED,
    DOS_RESERVED_49,
    DOS_RESERVED_4A,
    DOS_RESERVED_4B,
    DOS_RESERVED_4C,
    DOS_RESERVED_4D,
    DOS_RESERVED_4E,
    DOS_RESERVED_4F,
    DOS_FILE_ALREADY_EXISTS,
    DOS_RESERVED_51,
    DOS_CANNOT_MAKE_DIR_ENTRY,
    DOS_FAIL_ON_INT_24,
    DOS_TOO_MANY_REDIRECTIONS,
    DOS_DUPLICATE_REDIRECTION,
    DOS_INVALID_PASSWORD,
    DOS_INVALID_PARAMETER,
    DOS_NETWORK_DEVICE_FAULT,
    DOS_FUNCTION_NOT_SUPPORTED_BY_NETWORK,
    DOS_REQUIRED_SYS_COMPONENT_MISSING
};

/* Misc entry points */
void      DosExit(BYTE cRetCode);
// get return code
// exec
// get version
// console, aux, prn io
WORD      DosGetVersion(BYTE* pOemId, BYTE* pOemSerialNum);
// set/get time/date
PBYTE     DosGetPSP();

/* File functions */
DOSSTATUS DosOpen(CHAR* pszName, BYTE iMode, HFILE* pHf);
DOSSTATUS DosCreate(CHAR* pszName, WORD wAttr, HFILE* pHf);
DOSSTATUS DosClose(HFILE hFile);
DOSSTATUS DosRead(HFILE hFile, PVOID pBuffer, ULONG cbRead, ULONG* pcbActual);
DOSSTATUS DosWrite(HFILE hFile, PVOID pBuffer, ULONG cbRead, ULONG* pcbActual);
DOSSTATUS DosSetFilePtr(HFILE hFile, LONG ib, BYTE method, ULONG* ibActual);
DOSSTATUS DosDelete(HFILE hFile);
DOSSTATUS DosSetAttributes(CHAR* pszName, WORD wAttr);
DOSSTATUS DosGetAttributes(CHAR* pszName, WORD* pwAttr);
DOSSTATUS DosDevIoctl(HFILE hFile, BYTE bDevNum, DWORD dwBytes, PVOID pBuffer, ULONG* pcbTransferred);
DOSSTATUS DosDupHandle(HFILE hFile, HFILE* pHf);
DOSSTATUS DosDupHandle2(HFILE hFile, HFILE hfNew);
// dir
// file datetime
// findfirst
// findnext
// rename

/* Memory functions */
//DOSSTATUS DosAllocMem(WORD wParagraphs, WORD* pwSegment);
//DOSSTATUS DosFreeMem(WORD wSegment);
//DOSSTATUS DosModifyMem(WORD wNewBlockSize, WORD wSegment, WORD* pwMaxParagraphs);

#endif
